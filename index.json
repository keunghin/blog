[{"categories":null,"content":" 一定要坚持，要保持长时间学习，甚至终生学习的态度。 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。 不要乱买书，不要乱追求新技术新名词，基础的东西经过很长时间积累，会在未来至少10年通用。 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。 有时间看书，就先不要看专栏；有时间看专栏，就先不要看各种博客；有条件看官方文档，就先不要看速度教程。 人生一世，选条路，不退让，不更改，一直走到尽头，是件幸事。「庆余年」 所谓的黑色电影并不是一种类型，它不像西部片和犯罪片那样由环境和冲突来界定，而是由更微妙的调子和情绪特点来界定。「保罗·施耐德《黑色电影札记》」 不结同心人，空结同心草。「［唐］薛涛《春望词四首》其三」 ","date":"2021-09-02","objectID":"/posts/2021/09/tittletattle/:0:0","series":null,"tags":["Tattle"],"title":"摘录","uri":"/posts/2021/09/tittletattle/"},{"categories":null,"content":"主题相关 PCloud This is PCloud~💤 DoIt官方文档 DoIt官方文档 十年之约专题 十年之约 一个人的寂寞，一群人的狂欢。 各界领域博主 酷 壳 – COOLSHELL 享受编程和技术所带来的快乐 - Coding Your Ambition 云风的 BLOG 思绪来得快去得也快，偶尔会在这里停留 杜老师说 师者，传道，授业，解惑！ 雨临Lewis的博客 不想当写手的码农不是好咸鱼_(xз」∠)_ Jonny 这里是 Jonny 的博客 Bore’s Notes 博观而约取，厚积而薄发。 W4J1e's blog 总是偏爱不务正业 kirito 被带歪也不能怨我 BBing's Blog 自由 分享 合作 阳光派Plus’Blog 聪明的妖怪已经录下了唐僧的紧箍咒 ","date":"2021-08-24","objectID":"/friend/:0:0","series":null,"tags":[],"title":"Friend","uri":"/friend/"},{"categories":null,"content":"ArchLinux安装参考链接 篝ノ雾枝的魔法学院 ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:1:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"获取镜像列表 这条命令从官方镜像列表中获取3个最近同步过的源，并对这3个源进行大文件下载，根据个人电脑的下载速度进行排序，写入mirrorlist中 #注意：在--sort rate中，有些镜像无法进行评分，会在命令行下弹出警号（WARNING） sudo reflector --country 'China' -l 3 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist 同样的，另一种为每周执行一次 reflector reflector.timer 将reflector.timer修改为自启动 sudo systemctl enable reflector.timer #检查是否为自启动 sudo systemctl is-enabled reflector.timer #输出为enable即正确 编辑/etc/xdg/reflector/reflector.conf的文件 #把结果写在某文集 --save /etc/pacman.d/mirrorlist #选择传输协议，多个协议用英文逗号隔开 --protocol http,https #选择国家 --country China #获取3个最近同步的源 --latest 3 #用（大文件）下载速度排序，最快的在前面 --sort rate ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:2:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"开发环境 ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:3:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"Java Java Java-ArchWiki sudo pacman -S java-runtime-common java-environment-common yay jdk8 #选择 extra/jdk8-openjdk 使用 archlinux-java 命令来管理 Java 环境 列举 Java 环境： archlinux-java status 选择 Java 环境： sudo archlinux-java set java-8-openjdk ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:3:1","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"Go Go Go-ArchWiki sudo pacman -S go go-tools 第二种方法是 gcc-go。 若开发环境中用到 JetBrains 的 IDE 则必须使用go ，否则 IDE 无法在 /usr/lib/go 下找到 Go SDK。 原文：If you are using a Jetbrains IDE and the Go plugin cannot find your Go SDK path, you might be using an incompatible package. Remove the gcc-go package and replace it with go. If your $GOPATH is set, the IDE should now be able to find your Go SDK at /usr/lib/go. 配置环境变量 GOPATH ，放在用户目录(/usr/local/bin)下的 go/ 文件夹放置 Go 相关文件 vim ~/.zshrc # OR ~/.bashrc OR ~/.profile export GOPATH=~/go export PATH=$PATH:$GOPATH/bin 由于某些特殊的原因，国内无法很好地拉取 Go 相关的软件包。建议使用 goproxy/goproxy.cn ，只需在拉取前输入： export GOPROXY=https://goproxy.cn ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:3:2","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"修改引导程序 安装引导程序 编辑/etc/default/grub 文件，去掉GRUB_CMDLINE_LINUX_DEFAULT一行中最后的 quiet 参数。加入quiet splash nowatchdog参数。 vim /etc/default/grub 最后生成 GRUB 所需的配置文件 grub-mkconfig -o /boot/grub/grub.cfg ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:4:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"常用软件 #Yet another yogurt. Pacman wrapper and AUR helper written in go. sudo pacman -S yay #yay使用技巧 1.使用选项-S使用yay从AUR安装软件包 yay -S package 2.使用yay删除包 yay -Rns package 3.使用yay清除不需要的依赖项 yay -Yc # The popular and trusted web browser by Google (Stable Channel) sudo pacman -S google-chrome # Typora will give you a seamless experience as both a reader and a writer. sudo pacman -S typora #Visual Studio Code (vscode): Editor for building and debugging modern web and cloud applications (official binary version) sudo pacman -S visual-studio-code-bin #A CLI system information tool written in BASH that supports displaying images. sudo pacman -S neofetch #解决中文显示为方框 sudo pacman -S noto-fonts noto-fonts-cjk #解决双系统时间不同步问题 timedatectl set-local-rtc true ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"Trash-cli Trash-cli中文非官方教程 #比rm -rf保险的删除文件夹，删除文件到回收站里 sudo pacman -S trash-cli trash-put： 删除文件和目录（仅放入回收站中） trash-list ：列出被删除了的文件和目录 trash-restore：从回收站中恢复文件或目录 trash. trash-rm：删除回收站中的文件 trash-empty：清空回收站 ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:1","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"Spacemacs SPacemacs官网 在Spacemacs中打开教程（按住CONTROL键再按h键后松开CONTROL键再按t键会进入中文教程） ctrl + h + t 用于切换vim和emacs的模式（可视化的标识是左下角的蓝标（Emacs）和黄标（Vim）） ctrl + z C-表示当按字符时按住CONTROL键。因此c-f就表示：按住CONTROL键再按f。 M-表示当按字符时按住META（或EDIT或ALT）键。如果键盘上没有META、EDIT或ALT键，用下述方法等效：先按一下ESC键然后松开，再按。用来表示ESC键。 退出Emacs C-x C-c （两个连续的组合键） 退出一个正在运行中的命令 C-g 向前移动一屏 C-v 向后移动一屏 M(EDIT or ALT)-v 重绘屏幕，并将光标所在行置于屏幕的中央 #CONTROL-L C-l 找到光标，留意其附近的文字，然后按C-l。此时会发现其光标附近的文字与之前相同，位置却变为屏幕的中心。如果再次按C-l，附近的文字将移动到屏幕的顶端。再次按住C-l，文字将移动到低端 PageUp和PageDn在emacs和vim下都可以使用 上下左右四个方向移动 #上一行——previous(上一行) C-p #下一行——next(下一行) C-n #向左移——backward(回退) C-b #向右移——forward(前进) C-f 常用命令 #移动到该词末尾(词：英文以英文单词为准，中文以下一个标点符号为准) #如果光标处于词与词的空白处，M-f会移动到下一个词的末尾 M-f #和M-f一样，方向相反 M-b #向右移动一个字符 C-f #向左移动一个字符 C-b #向右移动一个词【对中文是移动到下一个标点符号】 M-f #向左移动一个词【对中文是移动到上一个标点符号】 M-b #移动到下一行 C-n #移动到上一行 C-p #移动到行首 C-a #移动到行尾 C-e #移动到句首 M-a #移动到句尾 M-e #移动到所有文字的最开头(需要辅以shift) #M==Alt or EDIT M-\u003c #移动到所有文字的最末尾(需要辅以shift) #M==Alt or EDIT M-\u003e 命令参数 #C-u数字参数，为一个命令指定数字参数 #数字参数(前缀参数)：这个参数是先于使用它的命令而输入的 #先输入C-u，然后输入数字作为参数，最后再输入命令(推荐) #另一种方式，按住META(或EDIT或ALAT)键，然后输入数字 C-u + 数字 + 命令 ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:2","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"ASUS充电阈值-bat 使用 bat 在 Linux 上轻松设置华硕笔记本电脑的充电阈值 bat 注意： 我在安装使用后，遇到了开机自检和关机时遇到了这么一行日志 Failed to start Persist the battery charging threshold after boot. 有知道的大佬可以告知。 下载bat二进制执行文件到主文件夹中 wget -O bat https://github.com/leveson/bat/releases/download/0.8.2/bat 移动bat到/usr/local/bin目录下（或者安装在以下位置） sudo mv bat /usr/local/bin（sudo install bat /usr/local/bin） 注意：因与bat重名，所以将下载到本地的的bat文件进行重命名 mv bat asusbat 使用asusbat查看当前充电阈值限制-t或者 --threshold asusbat -t 如果从未设置过电池充电阈值，则此命令应输出“100”。意味着电池已充满电 使用 asusbat 设置电池充电停止阈值 sudo asusbat -t \u003cCHARGE_THRESHOLD\u003e 例如：将笔记本电脑电池充电到 60% 然后停止充电 sudo asusbat -t 60 默认情况下，这个新的电池充电阈值仅用于当前会话，并会在系统重新启动时重置，其设置为永久化 -p 或者 --persist sudo asusbat -p 如果要撤消此操作并仅使用当前会话的充电阈值（以便在系统重新启动后不会保留）（ -r 或者 --reset） sudo asusbat -r 若取消电池充电阈值并让ASUS笔记本电脑充满电（最多 100%），使用以下命令将阈值恢复为 100 sudo asusbat -t 100 当前电池电量（-c 或者 --capacity) asusbat -c 打印充电状态 (-s 或者 --status） asusbat -s ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:3","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"N卡安装 笔记本显卡是1050Ti 安装显卡 yay -S nvidia-390xx-dkms nvidia-settings lib32-nvidia-390xx-utils 确定本机内核及安装相应包 #这个命令可以显示出当前arch的内核，我的是“5.13.13-arch1-1” uname -r #安装3个linux-headers acpi_call-dkms xorg-xrandr，\"xf86-video-intel\"这个在arch中是不用安装的，后面的git在配好机器前若没有安装，还是需要安装的，之后有涉及到使用git命令 sudo pacman -S linux-headers acpi_call-dkms xorg-xrandr #启用插件 sudo modprobe acpi_call git clone https://github.com/dglt1/optimus-switch-sddm.git cd ~/optimus-switch-sddm chmod +x install.sh sudo ./install.sh sudo set-nvidia.sh reboot 重启后就已经进入N卡状态了。 #查看显卡相关信息 nvidia-settings ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:4","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"clash自动更新订阅 参考链接： Clash自动更新订阅配置 clash-arch自启更新订阅 安装 sudo pacman -S clash 配置 通过systemctl管理Clash的进程，对应clash.service文件。 通过两个脚本start-clash.sh和stop-clash.sh实现开启更新订阅。 clash.service 注意： \"your home directory\"改为从根目录开始的路径。否则在启动clash.service单元文件时，会报错。 %i改为当前登录用户名(whoami查看当前用户)。 # edit and save this file to /usr/lib/systemd/system/clash.service [Unit] Description=A rule based proxy in Go for %i. After=network.target [Service] WorkingDirectory=\"your home directory\"/.config/clash Type=simple User=%i Restart=on-abort ExecStart=\"your home directory\"/.config/clash/start-clash.sh ExecStop=\"your home directory\"/.config/clash/stop-clash.sh [Install] WantedBy=multi-user.target start-clash.sh #!/bin/bash #保存PID文件 echo $$ \u003e ${HOME}/.config/clash/clash.pid # 订阅链接下载地址 CLASH_URL=\"你的订阅链接\" # 对比新的文件和旧的文件有什么不同 diff ${HOME}/.config/clash/config.yaml \u003c(curl -s ${CLASH_URL}) #如果两个文件一致，就直接开启clash，如果不一致就覆盖原文件 if [ \"$?\" == 0 ] then /usr/bin/clash else curl -L -o ${HOME}/.config/clash/config.yaml ${CLASH_URL} /usr/bin/clash fi stop-clash.sh 注意： rm命令也可以删除，作者使用的是trash-put进行删除。 #!/bin/bash PID=`cat ${HOME}/.config/clash/clash.pid` kill -9 ${PID} trash-put ${HOME}/.config/clash/clash.pid 写好后，给start-clash.sh和stop-clash.sh赋予执行权限 chmod +x stop-clash.sh chmod +x start-clash.sh 使用systemctl管理 sudo systemctl enable clash sudo systemctl start clash ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:5:5","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"ArchLinux-Tips journalctl -p 4 -b #-b选项可以筛选出本次boot直到当前的记录 #-p选项可以筛选出严重等级高于某一值的记录 #\"emerg\" (0), \"alert\" (1), \"crit\" (2), \"err\" (3), **\"warning\" (4)**, \"notice\" (5), \"info\" (6), \"debug\" (7) pgrep -l 进程名字(\"进程名字\") #添加当前命令行进环境变量 export http_proxy=\"本地地址:监听端口\" #释放当前命令行的环境变量 unset http_proxy ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:6:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"SSD配置 如果安装在SSD上，可以选择以下命令 sudo systemctl enable fstrim.timer sudo systemctl start fstrim.timer ","date":"2021-07-21","objectID":"/posts/2021/07/archlinuxkdelayout/:7:0","series":null,"tags":["Linux"],"title":"ArchLinuxKde配置","uri":"/posts/2021/07/archlinuxkdelayout/"},{"categories":null,"content":"这是网站的第一篇文章，历时半个多月，参阅了很多大佬的文章，感谢各位大佬的分享的优质资源。 链接汇总： 雨临Lewis 就是这个范儿 公子 Hugo部署到Github Ahrisy の 碎碎念 回忆中的明天 南岩666のBlog 少数派 Shuzang’s Blog 小林书架 风月 hugo博客添加评论系统Valine 为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍 creativecommons许可协议 友链添加 至此，本站终于建站成功！ 关于首页头像点击后会跳转到Posts下，办法是： 将themes/LoveIt/layouts/partials/home/目录下的profile.html复制到根目录[指：网站根目录]下的对应位置，将文件中的 \u003ca href=\"{{ $url}}\"{{ with .Title | default .Name }} title=\"{{ . }}\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 中的代码修改为 \u003ca {{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 之后鼠标再滑动到这时，就不会变成手掌点击模样了。 ","date":"2021-02-19","objectID":"/posts/2021/02/hugothemeinstall/:0:0","series":null,"tags":["Tattle"],"title":"建站","uri":"/posts/2021/02/hugothemeinstall/"}]